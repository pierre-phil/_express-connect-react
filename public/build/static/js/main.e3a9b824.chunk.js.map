{"version":3,"sources":["components/Todo.js","context/TodosContext.js","components/TodosList.js","context/ModeContext.js","components/SelectTodos.js","components/AddTodoForm.js","components/ModeSwitch.js","components/Todos.js","components/AppContainer.js","App.js","serviceWorker.js","index.js"],"names":["Todo","props","todo","deleteTodo","toggleCompleteTodo","style","textDecoration","isCompleted","console","log","className","text","type","onClick","TodosContext","createContext","TodosContextProvider","children","useState","JSON","parse","localStorage","getItem","todos","setTodos","Provider","value","TodosList","useContext","map","el","key","id","ModeContext","ModeContextProvider","mode","setMode","useEffect","setItem","modeClass","SelectTodos","filter","setFilter","htmlFor","onChange","event","target","AddTodoForm","addTodo","onSubmit","preventDefault","newTodoText","elements","reset","required","ModeSwitch","checked","Todos","document","title","length","stringify","filteredTodos","completedCount","task","newTodo","uuidv4","AppContainer","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e3a9b824.chunk.js","sourcesContent":["import React from \"react\"\n\nconst Todo = (props) => {\n    const { todo, deleteTodo, toggleCompleteTodo } = props;\n    const style = {\n      textDecoration: todo.isCompleted ? \"line-through\" : \"none\"\n    };\n    console.log(todo);\n    return (\n      <div className=\"shadow-sm border p-2 d-flex align-items-center justify-content-between mb-2\">\n        <span style={style}>{todo.text}</span>\n        <div className=\"btn-group\">\n          {todo.isCompleted ? (\n            <button\n              className=\"btn btn-light btn-sm btn-dark\"\n              type=\"button\"\n              onClick={() => toggleCompleteTodo(todo)}\n            >\n              R√©tablir\n            </button>\n          ) : (\n            <button\n              className=\"btn btn-light btn-sm\"\n              type=\"button\"\n              onClick={() => toggleCompleteTodo(todo)}\n            >\n              Terminer\n            </button>\n          )}\n          <button\n            className=\"btn btn-danger btn-sm\"\n            type=\"button\"\n            onClick={() => deleteTodo(todo)}\n          >\n            Supprimer\n          </button>\n        </div>\n      </div>\n    );\n  };\n\nexport default Todo","import React, { useState, createContext } from \"react\";\n\nexport const TodosContext = createContext();\n\nconst TodosContextProvider = ({ children }) => {\n  const [todos, setTodos] = useState(\n    () => JSON.parse(localStorage.getItem(\"todoList\")) || []\n  );\n  return (\n    <TodosContext.Provider value={{ todos, setTodos }}>\n      {children}\n    </TodosContext.Provider>\n  );\n};\n\nexport default TodosContextProvider;\n","import React, { useContext } from \"react\";\nimport Todo from \"./Todo\";\nimport { TodosContext } from \"../context/TodosContext\";\n\nconst TodosList = (props) => {\n  const { deleteTodo, toggleCompleteTodo } = props;\n  const { todos } = useContext(TodosContext);\n  return (\n    <main>\n      {todos.map((el) => {\n        return (\n          <Todo\n            key={el.id}\n            todo={el}\n            deleteTodo={deleteTodo}\n            toggleCompleteTodo={toggleCompleteTodo}\n          />\n        );\n      })}\n    </main>\n  );\n};\n\nexport default TodosList;\n","import React, { useState, useEffect, createContext } from \"react\";\n\nexport const ModeContext = createContext();\n\nconst ModeContextProvider = ({ children }) => {\n  const [mode, setMode] = useState(localStorage.getItem(\"mode\") || \"light\");\n  useEffect(() => {\n    localStorage.setItem(\"mode\", mode);\n  }, [mode]);\n  const modeClass = mode === \"dark\" ? \"bg-dark text-light\" : \"\";\n  return (\n    <ModeContext.Provider value={{ mode, setMode, modeClass }}>\n      {children}\n    </ModeContext.Provider>\n  );\n};\n\nexport default ModeContextProvider;\n","import React, { useContext } from \"react\";\nimport { ModeContext } from \"../context/ModeContext\";\n\nconst SelectTodos = (props) => {\n  const { filter, setFilter } = props;\n  const { modeClass } = useContext(ModeContext);\n  const handleSelectChange = (event) => {\n    setFilter(event.target.value);\n  };\n\n  return (\n    <div className=\"input-group mb-3\">\n      <label className={`input-group-text ${modeClass}`} htmlFor=\"select\">\n        Filtrer les t√¢ches\n      </label>\n      <select\n        className={`form-select ${modeClass}`}\n        id=\"select\"\n        value={filter}\n        onChange={handleSelectChange}\n      >\n        {/*eslint-disable-next-line*/}\n        <option value=\"all\">Toutes üñêÔ∏è</option>\n        {/*eslint-disable-next-line*/}\n        <option value=\"completed\">Termin√©es üí™</option>\n        {/*eslint-disable-next-line*/}\n        <option value=\"notcompleted\">pas Termin√©es üëà</option>\n      </select>\n    </div>\n  );\n};\n\nexport default SelectTodos;\n","import React, { useContext } from \"react\";\nimport { ModeContext } from \"../context/ModeContext\";\n\nconst AddTodoForm = (props) => {\n  const { addTodo, setFilter } = props;\n  const { modeClass } = useContext(ModeContext);\n  const handleFormSubmit = (event) => {\n    event.preventDefault();\n    const newTodoText = event.target.elements.todo.value;\n    addTodo(newTodoText);\n    console.log(\"newTodoText\", event.target.elements.todo.value);\n    event.target.reset();\n    setFilter((filter) => (filter === \"completed\" ? \"all\" : filter));\n  };\n\n  return (\n    <form onSubmit={handleFormSubmit}>\n      <div className=\"input-group mb-2\">\n        <label className={`input-group-text ${modeClass}`} htmlFor=\"todo\">\n          Ajouter une t√¢che\n        </label>\n        <input className={`form-control ${modeClass}`} id=\"todo\" required />\n      </div>\n      <button type=\"submit\" className=\"btn btn-primary\">\n        allons-y !\n      </button>\n    </form>\n  );\n};\n\nexport default AddTodoForm;\n","import React, { useContext } from \"react\";\nimport { ModeContext } from \"../context/ModeContext\";\n\nconst ModeSwitch = () => {\n  const { mode, setMode } = useContext(ModeContext);\n\n  const handleModeChange = () => {\n    setMode((mode) => (mode === \"dark\" ? \"light\" : \"dark\"));\n  };\n\n  return (\n    <div className=\"mb-3 d-flex flex-row justify-content-end\">\n      <div className=\"form-check form-switch\">\n        <input\n          className=\"form-check-input\"\n          type=\"checkbox\"\n          id=\"activate\"\n          checked={mode === \"dark\"}\n          onChange={handleModeChange}\n        />\n        <label className=\"form-check-label\" htmlFor=\"activate\">\n          {mode === \"dark\" ? \"Mode sombre\" : \"Mode clair\"}\n        </label>\n      </div>\n    </div>\n  );\n};\n\nexport default ModeSwitch;\n","import React, { useState, useContext, useEffect } from \"react\";\nimport TodosList from \"./TodosList\";\nimport SelectTodos from \"./SelectTodos\";\nimport AddTodoForm from \"./AddTodoForm\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport ModeSwitch from \"../components/ModeSwitch\";\nimport { TodosContext } from \"../context/TodosContext\";\n\nconst Todos = () => {\n  const { todos, setTodos } = useContext(TodosContext);\n  const [filter, setFilter] = useState(\"notcompleted\");\n  const addTodo = (text) => {\n    const newTodo = {\n      text,\n      isCompleted: false,\n      id: uuidv4(),\n    };\n    console.log(newTodo);\n    setTodos([...todos, newTodo]);\n  };\n\n  const deleteTodo = (task) => {\n    setTodos(todos.filter((el) => el !== task));\n  };\n\n  const toggleCompleteTodo = (task) => {\n    setTodos(\n      todos.map((el) => {\n        return {\n          ...el,\n          isCompleted: task.id === el.id ? !el.isCompleted : el.isCompleted,\n        };\n      })\n    );\n  };\n\n  useEffect(() => {\n    document.title = todos.length\n      ? `Vous avez ${todos.length} t√¢ches √† accomplir !`\n      : `Que devez vous faire aujourd'hui ?`;\n  }, [todos.length]);\n\n  useEffect(() => {\n    localStorage.setItem(\"todoList\", JSON.stringify(todos));\n  }, [todos]);\n\n  const filteredTodos = todos.filter((el) => {\n    if (filter === \"completed\") {\n      return el.isCompleted;\n    }\n    if (filter === \"notcompleted\") {\n      return !el.isCompleted;\n    }\n    return true;\n  });\n\n  const completedCount = todos.filter((el) => el.isCompleted).length;\n  return (\n    <main>\n      <h2 className=\"text-center\">\n        Ma liste de t√¢ches ({completedCount} / {todos.length})\n      </h2>\n      <ModeSwitch />\n      <SelectTodos filter={filter} setFilter={setFilter} />\n      <TodosList\n        todos={filteredTodos}\n        deleteTodo={deleteTodo}\n        toggleCompleteTodo={toggleCompleteTodo}\n      />\n      <AddTodoForm addTodo={addTodo} setFilter={setFilter} />\n    </main>\n  );\n};\n\nexport default Todos;\n","import React, { useContext } from \"react\";\nimport { ModeContext } from \"../context/ModeContext\";\n\nconst AppContainer = ({ children }) => {\n  const { modeClass } = useContext(ModeContext);\n  return (\n    <div className={`min-vh-100 py-3 ${modeClass}`}>\n      <div className=\"container my-3\">{children}</div>\n    </div>\n  );\n};\n\nexport default AppContainer;\n","import React from \"react\";\nimport Todos from \"./components/Todos\";\nimport AppContainer from \"./components/AppContainer\";\nimport ModeContextProvider from \"./context/ModeContext\";\nimport TodosContextProvider from \"./context/TodosContext\";\n\nfunction App() {\n  return (\n    <ModeContextProvider>\n      <TodosContextProvider>\n        <AppContainer>\n          <div className=\"container my-4\">\n            <h1 className=\"text-center\">ToDos App</h1>\n            <Todos />\n          </div>\n        </AppContainer>\n      </TodosContextProvider>\n    </ModeContextProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport \"bootstrap/dist/css/bootstrap.css\"\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}